name: "update"

on:
  release:
    types: [published]

jobs:
  generate-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get version
        id: version
        uses: martinbeentjes/npm-get-version-action@main
      
      - name: Read changelog
        id: changelog
        uses: juliangruber/read-file-action@v1
        with:
          path: ./changelog.md
      
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Generate update file
        uses: actions/github-script@v6
        env:
          version: ${{ steps.version.outputs.current-version }}
          changelog: ${{ steps.changelog.outputs.content }}
          releaseId: ${{ steps.get_release.outputs.id }}
        with:
          script: |
            const { version, changelog, releaseId } = process.env;

            let response = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
            });

            let assets = response.data;

            if (!assets || assets.length === 0)
            {
              core.setFailed("No assets available in response");
              return;
            }

            core.info(JSON.stringify(assets));

            let update = {
              "name": version,
              "notes": changelog,
              "pub_date": assets[0].updated_at,
              "platforms": {}
            };

            for (const asset of assets)
            {
              const name = asset.name;
              core.info(`Checking asset ${name}`)
              if ((typeof name !== "string" && !(name instanceof String)))
              {
                core.info(`Name not a string`)
                continue;
              }

              if (name.endsWith(".sig"))
              {
                core.info("Sig file");
                continue;
              }

              const sigName = asset.name + ".sig";
              const sigAsset = assets.find(elem => elem.name === sigName);
              if (!sigAsset)
              {
                core.info(`No sig file with name ${sigName}`)
                continue;
              }
              const sigResponse = await github.rest.repos.getReleaseAsset({
                headers: {
                  Accept: "application/octet-stream",
                },
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: sigAsset.id,
              });
              core.info(`Sig response: ${JSON.stringify(sigResponse)}`);

              const sig = JSON.stringify(sigResponse.data);
              core.info(`Sig: ${sig}`);

              let platform = {
                signature: sig,
                url: asset.browser_download_url
              };

              // TODO: Support more platforms
              const targz = ".tar.gz";
              if (name.endsWith(targz))
              {
                core.info("tar.gz");
                if (name.endsWith(".AppImage", name.length - targz.length))
                {
                  core.info("linux");
                  update.platforms["linux-x86_64"] = platform;
                }
                else
                {
                  core.info("mac");
                  update.platforms["darwin-intel"] = platform;
                }
              }
              else if (name.endsWith(".msi.zip"))
              {
                core.info("windows");
                update.platforms["windows-x86_64"] = platform;
              }
            }

            core.info(JSON.stringify(update));